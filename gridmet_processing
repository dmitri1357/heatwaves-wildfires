#!/usr/bin/env python3

# This script processes Tmax and Tmax percentiles, but scripts for the other variables are similar

import xarray as xr
import geopandas as gpd
import matplotlib.pyplot as plt 

# all 24 annual files 
import os

all_files = os.listdir()
files = []
for file in all_files:
    if file.startswith('tmmx'):
        files.append(file)

files.sort()

ds = xr.open_mfdataset(files, concat_dim='day', decode_times=True, combine='nested')
ds = ds.drop_vars(['crs'])
# Flip the 'lat' dimension upside down
ds = ds.isel(lat=slice(None, None, -1))

# reference file for lat/lon
ds2 = xr.open_dataset('MODIS_ba_gridMET_2001.nc',decode_times=False)
# Flip the 'lat' dimension upside down
ds2 = ds2.isel(lat=slice(None, None, -1))
lat_min = ds2.lat.min().values
lat_max = ds2.lat.max().values
lon_min = ds2.lon.min().values
lon_max = ds2.lon.max().values

# Use these bounds to subset tmax ds
ds_subset = ds.sel(lat=slice(lat_min, lat_max), lon=slice(lon_min, lon_max))

# aggregate variable by ecoregion

# subset to warm season (May-October)
ds_subset = ds_subset.sel(day=ds_subset['day'].dt.month.isin([5,6,7,8,9,10]))
gdf = gpd.read_file("wus_ecoregions.shp") 

import rioxarray

ds_subset = ds_subset.rio.write_crs("EPSG:4326")

# need to rename lat,lon to y,x for rioxarray operation
ds_subset = ds_subset.rename({"lat": "y"})
ds_subset = ds_subset.rename({"lon": "x"})

# Create an empty list to store daily sums for each ecoregion
ecoregion_vals = []

# Loop through each feature in the GeoDataFrame (each ecoregion)
for _, region in gdf.iterrows():
    # Mask the data to this ecoregion
    masked = ds_subset.rio.clip([region['geometry']], all_touched=True, drop=True)

    # Aggregate within this ecoregion for each day
    daily_val = masked.mean(dim=['y', 'x'], skipna=True)
    
    # Add the results to our list as a new DataArray for this ecoregion
    ecoregion_vals.append(daily_val)

# Combine all daily values into a single xarray DataArray with a new dimension for ecoregion
result = xr.concat(ecoregion_vals, dim="ecoregion")

# Add the ecoregion names or IDs as a coordinate
result = result.assign_coords(ecoregion=("ecoregion", gdf['US_L3CODE'].values))

result = result - 273.15
result.to_netcdf('tmax_ecoregions.nc')

# calculate percentile that each day's value represents
tmax_ecoregions = xr.open_dataset('tmax_ecoregions.nc') 
percs = tmax_ecoregions.rank(dim="day", pct=True)
percs = percs * 100

percs.to_netcdf('tmax_ecoregions_perc.nc')
