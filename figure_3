#!/usr/bin/env python3

'''
Note - this code shows how the BA ratios were calculated during heatwaves (panel A) and post-HW (panel D).
The code to calculate ratios for NFIRE human and natural is the same with only the variable names swapped, and is not shown here.
Similarly, the line plot of BA ratios is only shown for panel G.
'''

# Fig 3a - BA ratios during HW
# note - this code calculates BA ratios for the full warm season plus May-June, July-Aug, and Sep-Oct separately
# for the paper, I'm only using the aggregate warm season ratios

import xarray as xr
import geopandas as gpd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import ks_2samp
import matplotlib.patches as mpatches

wus = xr.open_dataset('wus_ecoregion_data.nc')

# Load the state boundaries
states = gpd.read_file('cb_2018_us_state_5m.shp')
states = states.to_crs("EPSG:4326")
states = states[states.NAME.isin(['Washington', 'Oregon', 'Idaho', 'Montana',
                                  'California', 'Nevada', 'Utah', 'Wyoming',
                                  'Colorado', 'Arizona', 'New Mexico'])]

# Load the ecoregion shapefile
wus_ecoregions = gpd.read_file("wus_ecoregions.shp")

# Define overall and bi-monthly periods
time_masks = {
    "Warm Season (May-Oct)": None,  # Full time period
    "May-June": (wus.day.dt.month.isin([5, 6])),
    "July-August": (wus.day.dt.month.isin([7, 8])),
    "Sept-Oct": (wus.day.dt.month.isin([9, 10]))
}

# need to calculate area of each ecoregion

# First, convert to an equal-area projection (US National Atlas Equal Area)
wus_ecoregions2 = wus_ecoregions.to_crs(epsg=5070)  

# Initialize a dictionary to store results for each period
results = {}
results_actual_values = {}
significance_results = {}

# Get unique ecoregion identifiers
ecoregion_ids = wus.ecoregion.values

# note - in a later prompt, I change this code to compare BA on heatwave days to BA on 
# days with <90th percentile Tmax 
for period, mask in time_masks.items():
    if mask is not None:
        wus_subset = wus.sel(day=mask)
    else:
        wus_subset = wus

    # Initialize an array to store the burned area ratio for each ecoregion
    burned_area_ratio = xr.full_like(wus_subset.burned_area.mean(dim='day'), np.nan)
    burned_area_actual = xr.full_like(wus_subset.burned_area.mean(dim='day'), np.nan)
    significance_flags = []

    # Process each ecoregion
    for ecoregion in ecoregion_ids:
        ecoregion_burned_area = wus_subset.burned_area.sel(ecoregion=ecoregion)
        ecoregion_tmax_percentile = wus_subset.tmax_percentile.sel(ecoregion=ecoregion)
        
        ecoregion_area = wus_ecoregions2[wus_ecoregions2['US_L3CODE'] == ecoregion].geometry.area/1e6 # convert m2 to km2
        ecoregion_area = ecoregion_area.iloc[0]

        # Initialize lists to store yearly masks
        annual_expanded_heatwave_masks = []
        annual_below_90_masks = []

        # Split data into 24 years for processing
        for year in np.arange(2001, 2025):
            # Select data for the current year
            year_burned_area = ecoregion_burned_area.sel(day=ecoregion_burned_area.day.dt.year == year)
            year_tmax_percentile = ecoregion_tmax_percentile.sel(day=ecoregion_tmax_percentile.day.dt.year == year)

            # Identify heatwave days (3+ consecutive days with tmax_percentile > 90)
            rolling_sum = (year_tmax_percentile > 90).rolling(day=3, center=False).sum()
            heatwave_days = rolling_sum >= 3

            # Expand the heatwave mask to include all days within the heatwave period
            expanded_heatwave_mask = heatwave_days.copy()
            for i in range(1, 3):  # Backfill exactly 2 days before a heatwave starts
                expanded_heatwave_mask |= heatwave_days.shift(day=-i, fill_value=False)
                
            # Identify the 3 days **before** a heatwave starts (ensuring no overlap with previous heatwaves)
            pre_heatwave_mask = xr.full_like(expanded_heatwave_mask, False, dtype=bool)

            for i in range(1, 6):  # Look back 5 days
                pre_heatwave_day = expanded_heatwave_mask.shift(day=-i, fill_value=False)  # Shift backward
                pre_heatwave_mask |= pre_heatwave_day  # Combine across all 5 days
            
            # Ensure that no pre-heatwave days overlap with earlier heatwaves
            pre_heatwave_mask &= ~expanded_heatwave_mask

            # Append the yearly masks to the lists
            annual_expanded_heatwave_masks.append(expanded_heatwave_mask)
            annual_below_90_masks.append(pre_heatwave_mask)

        # Concatenate the yearly masks into single masks spanning the full 24-year period
        expanded_heatwave_mask = xr.concat(annual_expanded_heatwave_masks, dim="day")
        below_90_mask = xr.concat(annual_below_90_masks, dim="day")

        # Proceed with the original analysis over the full 24 years
        burned_area_heatwave = ecoregion_burned_area.where(expanded_heatwave_mask, drop=True)
        burned_area_below_90 = ecoregion_burned_area.where(below_90_mask, drop=True)

        # Calculate average burned area for heatwave days and below-90 days
        avg_burned_heatwave = burned_area_heatwave.mean(dim='day', skipna=True)
        avg_burned_below_90 = burned_area_below_90.mean(dim='day', skipna=True)

        # Calculate the burned area ratio, handle division by zero
        if avg_burned_below_90 > 0 and np.sum(expanded_heatwave_mask.values) >= 20:
            burned_area_ratio.loc[ecoregion] = avg_burned_heatwave / avg_burned_below_90
            burned_area_actual.loc[ecoregion] = avg_burned_heatwave/ecoregion_area # fraction of ecoregion
            
        # Perform K-S test for significance
        heatwave_values = burned_area_heatwave.values[~np.isnan(burned_area_heatwave.values)]
        below_90_values = burned_area_below_90.values[~np.isnan(burned_area_below_90.values)]

        if len(heatwave_values) > 0 and avg_burned_below_90 > 0 and len(below_90_values) > 0 and np.sum(expanded_heatwave_mask.values) >= 20:
            _, p_value = ks_2samp(heatwave_values, below_90_values)
            significance_flags.append(p_value < 0.1)  # True if significant
        else:
            significance_flags.append(False)

    # Store the results for this period
    results[period] = burned_area_ratio
    results_actual_values[period] = burned_area_actual
    significance_results[period] = significance_flags

warm_season = results['Warm Season (May-Oct)'].values
fig_2a_data = warm_season.copy()
warm_season = significance_results['Warm Season (May-Oct)']
fig_2a_significance = warm_season.copy()

# repeat the above plotting with new bins and non-linear colorbar

import matplotlib as mpl
from matplotlib.colors import ListedColormap, BoundaryNorm

# **Define bin edges**
bins = np.array([
    0.1, 0.133, 0.2, 0.25, 0.333, 0.4, 0.5, 0.667, 0.8, 0.909, 1, 1.1, 1.25, 1.5, 2, 2.5, 3, 4, 
    5, 7.5, 10
])

# **Manually define blue shades** (negative bins, from darkest to lightest)
blue_colors = [
    "#08306b",  # New darkest blue
    "#08519c",
    "#2171b5",
    "#4292c6",
    "#6baed6",
    "#9ecae1",
    "#b3d3e8",
    "#c6dbef",
    "#dceaf3",
    "#eff7fc",
    "#f7fbff"  # Lightest blue
]

# **Manually define orange shades** (positive bins, from light to dark burnt orange)
red_colors = [
    "#fee5d9",  # NEW Lightest red
    "#fee0d2",  
    "#fcbba1",  
    "#fc9272",  
    "#fb6a4a",  
    "#ef3b2c",  
    "#cb181d",  
    "#a50f15",  
    "#870c12",  
    "#67000d",  
    "#58000a"   # Darkest red
]

# **Combine the updated blues and oranges**
custom_colors = blue_colors + red_colors

# Create colormap and normalizer
custom_cmap = ListedColormap(custom_colors)
norm = BoundaryNorm(bins, custom_cmap.N)

# Plot the results
fig, axes = plt.subplots(1, 4, figsize=(24, 6), constrained_layout=True)

for ax, (period, ratios) in zip(axes, results.items()):
    ecoregions = wus_ecoregions.copy()
    ecoregions['burned_area_ratio'] = ratios.values
    ecoregions["is_significant"] = significance_results[period]

    ecoregions.plot(column='burned_area_ratio', 
                    vmin = 0, vmax = 10, norm=norm,
                    ax=ax, cmap=custom_cmap, legend=False,
                    missing_kwds={'color': '0.8', 'label': 'No Data'})

    states.boundary.plot(ax=ax, edgecolor='k', lw=1)
    wus_ecoregions.boundary.plot(ax=ax, edgecolor="black", linewidth=0.5)
    
    # extract the plotted color for the Central Valley (#7) for overplotting on map
    value = ecoregions.loc[ecoregions["US_L3CODE"] == 7, "burned_area_ratio"].values[0]

    # Find the index in the colormap
    color_index = norm(value)

    # Extract the RGB color from the ListedColormap
    rgb_color = custom_cmap.colors[color_index] if ~np.isnan(value) else "0.8"
    
    # Add hatching for significant ecoregions
    for _, row in ecoregions.iterrows():
        if row["is_significant"]:  # Check significance flag
            if row.geometry.geom_type == "Polygon":
                polygons = [row.geometry]
            elif row.geometry.geom_type == "MultiPolygon":
                polygons = row.geometry.geoms  # Extract individual polygons
            else:
                polygons = []

            for poly in polygons:
                patch = mpatches.Polygon(np.array(poly.exterior.coords),
                                         facecolor="none", edgecolor="k",
                                         hatch="..", linewidth=1, zorder=100)
                ax.add_patch(patch)
        # handle the weird situation where the Central Valley (#7) gets overplotted by ecoregion #6 hatching
        elif row['L3_KEY'] == '7  Central California Valley' and row['is_significant'] == False and ecoregions.loc[5]['is_significant'] == True:
            polygons = [row.geometry]
            for poly in polygons:
                patch = mpatches.Polygon(np.array(poly.exterior.coords),
                                          facecolor=rgb_color, edgecolor="k",
                                          hatch="", linewidth=1, zorder=101)
                ax.add_patch(patch)

    ax.set_title(period)
    ax.set_axis_off()

# Add a single horizontal colorbar beneath the maps
cbar = fig.colorbar(
    mpl.cm.ScalarMappable(cmap=custom_cmap, norm=norm),
    ax=axes,
    orientation='horizontal',
    extend='max',
    fraction=0.025,  # control the length
    pad=0.05,             # Keep the colorbar close to the maps
    aspect=50,           # control the width
    ticks=bins[::1]  # Show ticks for every other bin
)

#cbar.set_label("Burned Area Ratio")

#plt.suptitle("BA ratio during heatwaves vs. non-heatwave days")
plt.show()

# Fig. 3d - BA ratios post-HW

import xarray as xr
import geopandas as gpd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import ks_2samp
import matplotlib.patches as mpatches

wus = xr.open_dataset('wus_ecoregion_data.nc')

# Load the state boundaries
states = gpd.read_file('cb_2018_us_state_5m.shp')
states = states.to_crs("EPSG:4326")
states = states[states.NAME.isin(['Washington', 'Oregon', 'Idaho', 'Montana',
                                  'California', 'Nevada', 'Utah', 'Wyoming',
                                  'Colorado', 'Arizona', 'New Mexico'])]

# Load the ecoregion shapefile
wus_ecoregions = gpd.read_file("wus_ecoregions.shp")

# Define overall and bi-monthly periods
time_masks = {
    "Warm Season (May-Oct)": None,  # Full time period
    "May-June": (wus.day.dt.month.isin([5, 6])),
    "July-August": (wus.day.dt.month.isin([7, 8])),
    "Sept-Oct": (wus.day.dt.month.isin([9, 10]))
}

# need to calculate area of each ecoregion

# First, convert to an equal-area projection (US National Atlas Equal Area)
wus_ecoregions2 = wus_ecoregions.to_crs(epsg=5070)  

# Initialize a dictionary to store results for each period
results = {}
results_actual_values = {}
significance_results = {}

# Get unique ecoregion identifiers
ecoregion_ids = wus.ecoregion.values

# note - in a later prompt, I change this code to compare BA on heatwave days to BA on 
# days with <90th percentile Tmax 
for period, mask in time_masks.items():
    if mask is not None:
        wus_subset = wus.sel(day=mask)
    else:
        wus_subset = wus

    # Initialize an array to store the burned area ratio for each ecoregion
    burned_area_ratio = xr.full_like(wus_subset.burned_area.mean(dim='day'), np.nan)
    burned_area_actual = xr.full_like(wus_subset.burned_area.mean(dim='day'), np.nan)
    significance_flags = []

    # Process each ecoregion
    for ecoregion in ecoregion_ids:
        ecoregion_burned_area = wus_subset.burned_area.sel(ecoregion=ecoregion)
        ecoregion_tmax_percentile = wus_subset.tmax_percentile.sel(ecoregion=ecoregion)
        
        ecoregion_area = wus_ecoregions2[wus_ecoregions2['US_L3CODE'] == ecoregion].geometry.area/1e6 # convert m2 to km2
        ecoregion_area = ecoregion_area.iloc[0]

        # Initialize lists to store yearly masks
        annual_expanded_heatwave_masks = []
        annual_below_90_masks = []

        # Split data into 24 years for processing
        for year in np.arange(2001, 2025):
            # Select data for the current year
            year_burned_area = ecoregion_burned_area.sel(day=ecoregion_burned_area.day.dt.year == year)
            year_tmax_percentile = ecoregion_tmax_percentile.sel(day=ecoregion_tmax_percentile.day.dt.year == year)

            # Identify heatwave days (3+ consecutive days with tmax_percentile > 90)
            rolling_sum = (year_tmax_percentile > 90).rolling(day=3, center=False).sum()
            heatwave_days = rolling_sum >= 3

            # Expand the heatwave mask to include all days within the heatwave period
            expanded_heatwave_mask = heatwave_days.copy()
            for i in range(1, 3):  # Backfill exactly 2 days before a heatwave starts
                expanded_heatwave_mask |= heatwave_days.shift(day=-i, fill_value=False)
                
            # Identify the 3 days **before** a heatwave starts (ensuring no overlap with previous heatwaves)
            pre_heatwave_mask = xr.full_like(expanded_heatwave_mask, False, dtype=bool)

            for i in range(1, 6):  # Look back 3 days
                pre_heatwave_day = expanded_heatwave_mask.shift(day=-i, fill_value=False)  # Shift backward
                pre_heatwave_mask |= pre_heatwave_day  # Combine across all 3 days
            
            # Ensure that no pre-heatwave days overlap with earlier heatwaves
            pre_heatwave_mask &= ~expanded_heatwave_mask

            # Identify the 5 days **after** a heatwave ends (ensuring no overlap with following heatwaves)
            days_after = xr.full_like(expanded_heatwave_mask, False, dtype=bool)

            for i in range(1, 6):  # Look forward 5 days
                post_heatwave_day = expanded_heatwave_mask.shift(day=i, fill_value=False)  # Shift forward
                days_after |= post_heatwave_day  # Combine across all 5 days
             
            # Ensure that no post-heatwave days overlap with following heatwaves
            days_after &= ~expanded_heatwave_mask

            # Append the yearly masks to the lists
            annual_expanded_heatwave_masks.append(days_after) # swap to days_after
            annual_below_90_masks.append(pre_heatwave_mask)

        # Concatenate the yearly masks into single masks spanning the full 24-year period
        expanded_heatwave_mask = xr.concat(annual_expanded_heatwave_masks, dim="day")
        below_90_mask = xr.concat(annual_below_90_masks, dim="day")

        # Proceed with the original analysis over the full 24 years
        burned_area_heatwave = ecoregion_burned_area.where(expanded_heatwave_mask, drop=True)
        burned_area_below_90 = ecoregion_burned_area.where(below_90_mask, drop=True)

        # Calculate average burned area for heatwave days and below-90 days
        avg_burned_heatwave = burned_area_heatwave.mean(dim='day', skipna=True)
        avg_burned_below_90 = burned_area_below_90.mean(dim='day', skipna=True)

        # Calculate the burned area ratio, handle division by zero
        if avg_burned_below_90 > 0 and np.sum(expanded_heatwave_mask.values) >= 20:
            burned_area_ratio.loc[ecoregion] = avg_burned_heatwave / avg_burned_below_90
            burned_area_actual.loc[ecoregion] = avg_burned_heatwave/ecoregion_area # fraction of ecoregion
            
        # Perform K-S test for significance
        heatwave_values = burned_area_heatwave.values[~np.isnan(burned_area_heatwave.values)]
        below_90_values = burned_area_below_90.values[~np.isnan(burned_area_below_90.values)]

        if len(heatwave_values) > 0 and avg_burned_below_90 > 0 and len(below_90_values) > 0 and np.sum(expanded_heatwave_mask.values) >= 20:
            _, p_value = ks_2samp(heatwave_values, below_90_values)
            significance_flags.append(p_value < 0.1)  # True if significant
        else:
            significance_flags.append(False)

    # Store the results for this period
    results[period] = burned_area_ratio
    results_actual_values[period] = burned_area_actual
    significance_results[period] = significance_flags

warm_season = results['Warm Season (May-Oct)'].values
fig_2d_data = warm_season.copy()
warm_season = significance_results['Warm Season (May-Oct)']
fig_2d_significance = warm_season.copy()

# repeat the above plotting with new bins and non-linear colorbar

import matplotlib as mpl
from matplotlib.colors import ListedColormap, BoundaryNorm

# **Define bin edges**
bins = np.array([
    0.1, 0.133, 0.2, 0.25, 0.333, 0.4, 0.5, 0.667, 0.8, 0.909, 1, 1.1, 1.25, 1.5, 2, 2.5, 3, 4, 
    5, 7.5, 10
])

# **Manually define blue shades** (negative bins, from darkest to lightest)
blue_colors = [
    "#08306b",  # New darkest blue
    "#08519c",
    "#2171b5",
    "#4292c6",
    "#6baed6",
    "#9ecae1",
    "#b3d3e8",
    "#c6dbef",
    "#dceaf3",
    "#eff7fc",
    "#f7fbff"  # Lightest blue
]

# **Manually define orange shades** (positive bins, from light to dark burnt orange)
red_colors = [
    "#fee5d9",  # NEW Lightest red
    "#fee0d2",  
    "#fcbba1",  
    "#fc9272",  
    "#fb6a4a",  
    "#ef3b2c",  
    "#cb181d",  
    "#a50f15",  
    "#870c12",  
    "#67000d",  
    "#58000a"   # Darkest red
]

# **Combine the updated blues and oranges**
custom_colors = blue_colors + red_colors

# Create colormap and normalizer
custom_cmap = ListedColormap(custom_colors)
norm = BoundaryNorm(bins, custom_cmap.N)

# Plot the results
fig, axes = plt.subplots(1, 4, figsize=(24, 6), constrained_layout=True)

for ax, (period, ratios) in zip(axes, results.items()):
    ecoregions = wus_ecoregions.copy()
    ecoregions['burned_area_ratio'] = ratios.values
    ecoregions["is_significant"] = significance_results[period]

    ecoregions.plot(column='burned_area_ratio', 
                    vmin = 0, vmax = 10, norm=norm,
                    ax=ax, cmap=custom_cmap, legend=False,
                    missing_kwds={'color': '0.8', 'label': 'No Data'})

    states.boundary.plot(ax=ax, edgecolor='k', lw=1)
    wus_ecoregions.boundary.plot(ax=ax, edgecolor="black", linewidth=0.5)
    
    # extract the plotted color for the Central Valley (#7) for overplotting on map
    value = ecoregions.loc[ecoregions["US_L3CODE"] == 7, "burned_area_ratio"].values[0]

    # Find the index in the colormap
    color_index = norm(value)

    # Extract the RGB color from the ListedColormap
    rgb_color = custom_cmap.colors[color_index] if ~np.isnan(value) else "0.8"
    
    # Add hatching for significant ecoregions
    for _, row in ecoregions.iterrows():
        if row["is_significant"]:  # Check significance flag
            if row.geometry.geom_type == "Polygon":
                polygons = [row.geometry]
            elif row.geometry.geom_type == "MultiPolygon":
                polygons = row.geometry.geoms  # Extract individual polygons
            else:
                polygons = []

            for poly in polygons:
                patch = mpatches.Polygon(np.array(poly.exterior.coords),
                                         facecolor="none", edgecolor="k",
                                         hatch="..", linewidth=1, zorder=100)
                ax.add_patch(patch)
        # handle the weird situation where the Central Valley (#7) gets overplotted by ecoregion #6 hatching
        elif row['L3_KEY'] == '7  Central California Valley' and row['is_significant'] == False and ecoregions.loc[5]['is_significant'] == True:
            polygons = [row.geometry]
            for poly in polygons:
                patch = mpatches.Polygon(np.array(poly.exterior.coords),
                                          facecolor=rgb_color, edgecolor="k",
                                          hatch="", linewidth=1, zorder=101)
                ax.add_patch(patch)

    ax.set_title(period)
    ax.set_axis_off()

# Add a single horizontal colorbar beneath the maps
cbar = fig.colorbar(
    mpl.cm.ScalarMappable(cmap=custom_cmap, norm=norm),
    ax=axes,
    orientation='horizontal',
    extend='max',
    fraction=0.025,  # control the length
    pad=0.05,             # Keep the colorbar close to the maps
    aspect=50,           # control the width
    ticks=bins[::1]  # Show ticks for every other bin
)

#cbar.set_label("Burned Area Ratio")

#plt.suptitle("BA ratio during heatwaves vs. non-heatwave days")
plt.show()

# Fig. 3G

# new version with broken y-axis

import matplotlib.pyplot as plt

forest_boolean_vector = np.array([1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,1])

# break out burned area ratios by forest/non-forest
forest_ba_ratios = burned_area_ratios[forest_boolean_vector==1,:]
nonforest_ba_ratios = burned_area_ratios[forest_boolean_vector==0,:]
forest_ba_mean = np.mean(forest_ba_ratios,axis=0)
nonforest_ba_mean = np.mean(nonforest_ba_ratios,axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(8, 6.8),
                               gridspec_kw={'height_ratios': [1, 3]})

lags = np.arange(-5, 15)  # X-axis from -7 to +7 (changed to -3 to +11)

# Plot data in both axes
for i in range(len(ecoregion_ids)):
    color = "#228B22" if forest_boolean_vector[i] == 1 else "#964B00"
    ax1.plot(lags, burned_area_ratios[i, :], '-', lw=1, alpha=0.7, color=color)
    ax2.plot(lags, burned_area_ratios[i, :], '-', lw=1, alpha=0.7, color=color)

ax1.plot(lags, forest_ba_mean, '-', lw=5, alpha=1, color="#228B22")
ax1.plot(lags, nonforest_ba_mean, '-', lw=5, alpha=1, color="#964B00")
ax2.plot(lags, forest_ba_mean, '-', lw=5, alpha=1, color="#228B22")
ax2.plot(lags, nonforest_ba_mean, '-', lw=5, alpha=1, color="#964B00")

# Set y-limits
ax1.set_ylim(12, 21)
ax2.set_ylim(-0.5, 10)

# Remove spines between subplots
ax1.spines['bottom'].set_visible(False)
ax2.spines['top'].set_visible(False)

# Hide unnecessary ticks
ax1.tick_params(labelbottom=False)
ax2.tick_params(labeltop=False)

# Set specific y-ticks
ax1.set_yticks([15, 20])
ax1.tick_params(axis='y', labelsize=22)
ax2.set_yticks(range(0, 11, 2))
ax2.tick_params(axis='y', labelsize=22)

# # Set x-ticks
# plt.xticks(np.arange(-5, 15, 2), fontsize=22)

custom_ticks = np.arange(-5, 15, 1)
custom_labels = ['-5','','-3','','-1','1','','3','','5','','7','','9','','11','','13','','15']
plt.xticks(custom_ticks, custom_labels, fontsize=22)

# Add dashes to both axes
for ax in (ax1, ax2):
    ax.axvline(x=0, color='k', linestyle='--')
    ax.axvline(x=4.5, color='k', linestyle='--')
    ax.axvline(x=4 + 5, color='k', linestyle='--')
    ax.axhline(y=1, color='k', linestyle='-')

# Axis labels
ax2.set_xlabel("Days relative to HW", fontsize=20)
#ax2.set_ylabel("Ratio", fontsize=20)

